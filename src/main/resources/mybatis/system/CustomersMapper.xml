<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.customers.dao.CustomersDao">

	<select id="get" resultType="com.bootdo.customers.domain.CustomersDO">
		select `contract_Id`,`user_Name`,`install_Address`,`goods`,`debug_Data`,`goods_Number`,`guarantee`,`customer_Signature`,`contract` from work_customers where contract_Id = #{value}
	</select>

	<select id="list" resultType="com.bootdo.customers.domain.CustomersDO">
		select `contract_Id`,`user_Name`,`install_Address`,`goods`,`debug_Data`,`goods_Number`,`guarantee`,`customer_Signature`,`contract` from work_customers
        <where>  
		  		  <if test="contractId != null and contractId != ''"> and contract_Id = #{contractId} </if>
		  		  <if test="userName != null and userName != ''"> and user_Name = #{userName} </if>
		  		  <if test="installAddress != null and installAddress != ''"> and install_Address = #{installAddress} </if>
		  		  <if test="goods != null and goods != ''"> and goods = #{goods} </if>
		  		  <if test="debugData != null and debugData != ''"> and debug_Data = #{debugData} </if>
		  		  <if test="goodsNumber != null and goodsNumber != ''"> and goods_Number = #{goodsNumber} </if>
		  		  <if test="guarantee != null and guarantee != ''"> and guarantee = #{guarantee} </if>
		  		  <if test="customerSignature != null and customerSignature != ''"> and customer_Signature = #{customerSignature} </if>
		  		  <if test="contract != null and contract != ''"> and contract = #{contract} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by contract_Id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from work_customers
		 <where>  
		  		  <if test="contractId != null and contractId != ''"> and contract_Id = #{contractId} </if>
		  		  <if test="userName != null and userName != ''"> and user_Name = #{userName} </if>
		  		  <if test="installAddress != null and installAddress != ''"> and install_Address = #{installAddress} </if>
		  		  <if test="goods != null and goods != ''"> and goods = #{goods} </if>
		  		  <if test="debugData != null and debugData != ''"> and debug_Data = #{debugData} </if>
		  		  <if test="goodsNumber != null and goodsNumber != ''"> and goods_Number = #{goodsNumber} </if>
		  		  <if test="guarantee != null and guarantee != ''"> and guarantee = #{guarantee} </if>
		  		  <if test="customerSignature != null and customerSignature != ''"> and customer_Signature = #{customerSignature} </if>
		  		  <if test="contract != null and contract != ''"> and contract = #{contract} </if>
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.bootdo.customers.domain.CustomersDO">
		insert into work_customers
		(
			`contract_Id`, 
			`user_Name`, 
			`install_Address`, 
			`goods`, 
			`debug_Data`, 
			`goods_Number`, 
			`guarantee`, 
			`customer_Signature`, 
			`contract`
		)
		values
		(
			#{contractId}, 
			#{userName}, 
			#{installAddress}, 
			#{goods}, 
			#{debugData}, 
			#{goodsNumber}, 
			#{guarantee}, 
			#{customerSignature}, 
			#{contract}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.customers.domain.CustomersDO">
		update work_customers 
		<set>
			<if test="userName != null">`user_Name` = #{userName}, </if>
			<if test="installAddress != null">`install_Address` = #{installAddress}, </if>
			<if test="goods != null">`goods` = #{goods}, </if>
			<if test="debugData != null">`debug_Data` = #{debugData}, </if>
			<if test="goodsNumber != null">`goods_Number` = #{goodsNumber}, </if>
			<if test="guarantee != null">`guarantee` = #{guarantee}, </if>
			<if test="customerSignature != null">`customer_Signature` = #{customerSignature}, </if>
			<if test="contract != null">`contract` = #{contract}</if>
		</set>
		where contract_Id = #{contractId}
	</update>
	
	<delete id="remove">
		delete from work_customers where contract_Id = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from work_customers where contract_Id in 
		<foreach item="contractId" collection="array" open="(" separator="," close=")">
			#{contractId}
		</foreach>
	</delete>

</mapper>